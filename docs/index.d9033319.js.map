{"mappings":"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","sources":["<anon>","src/main.ts","src/modules/API.ts","src/modules/Product.ts","src/modules/Filter.ts"],"sourcesContent":["// klass för product med alla variablar som behövs.\nclass $7278615a9fe729f6$export$264ad599d7cef668 {\n    constructor(title, images, stock, price, discountPercentage, category, rating){\n        this.title = title;\n        this.images = images;\n        this.stock = stock;\n        this.price = price;\n        this.discountPercentage = discountPercentage;\n        this.category = category;\n        this.rating = rating;\n    }\n    // funktion som loggar alla variablar.\n    displayInfo() {\n        console.table({\n            Name: this.title,\n            Images: this.images.join(\", \"),\n            Stock: this.stock,\n            Price: `$${this.price}`,\n            Discount: `${this.discountPercentage}%`,\n            Category: this.category,\n            Rating: this.rating\n        });\n    }\n    // funktion som räknar ut det rabatterade priset.\n    discountedPrice() {\n        return Math.round(this.price * (1 - this.discountPercentage / 100) * 100) / 100;\n    }\n    // funktion som uppdaterar lagersaldot.\n    updateStock() {\n        if (this.stock > 0) this.stock--;\n    }\n    // funktion som skapar ett produktkort och sedan returnerar det.\n    productCard() {\n        const productCard = document.createElement('div');\n        productCard.classList.add('card');\n        const title = document.createElement('h3');\n        title.innerText = this.title;\n        const img = document.createElement('img');\n        img.src = this.images[0];\n        img.alt = `Image of ${this.title}`;\n        const stock = document.createElement('p');\n        stock.innerHTML = `<b>Stock: ${this.stock}</b>`;\n        const discountedPrice = document.createElement('p');\n        discountedPrice.innerHTML = `<i>Price: $${this.discountedPrice()}</i>`;\n        const addToCartBtn = document.createElement('button');\n        addToCartBtn.innerText = \"Add to Cart\";\n        addToCartBtn.addEventListener('click', ()=>{\n            this.updateStock();\n            stock.innerHTML = `<b>Stock: ${this.stock}</b>`;\n        });\n        productCard.append(title, img, stock, discountedPrice, addToCartBtn);\n        return productCard;\n    }\n}\n\n\nasync function $d260f059385ba7e9$export$68a801b7b3c0bfaa() {\n    try {\n        const response = await fetch('https://dummyjson.com/products');\n        if (!response.ok) throw new Error('Failed to fetch products');\n        const data = await response.json();\n        const products = data.products.map((product)=>{\n            return new (0, $7278615a9fe729f6$export$264ad599d7cef668)(product.title, product.images, product.stock, product.price, product.discountPercentage, product.category, product.rating);\n        });\n        return products;\n    } catch (error) {\n        console.error('Error fetching products:', error);\n        throw new Error('Could not fetch products. Please try again later.');\n    }\n}\n\n\n// funktion som är ett filter på produkternas kategorier.\nconst $3e2d7e5f210f46c9$export$6d1731a321e8bdf4 = (products, category)=>category === \"All\" || category === \"Select category\" ? products : products.filter((product)=>product.category === category);\n// funktion på produkternas priser.\nconst $3e2d7e5f210f46c9$export$37d568e1c36a0ac2 = (products, priceRange)=>{\n    if (priceRange === \"Select price\") return products;\n    return products.filter((product)=>{\n        const displayedPrice = product.discountedPrice();\n        return priceRange === \"< $50\" ? displayedPrice < 50 : displayedPrice > 50;\n    });\n};\n// funktion som sorterar produkterna beroende på pris, lågt till högt eller högt till lågt.\nconst $3e2d7e5f210f46c9$export$799bcc2b7243bbab = (products, order = 'lowToHighPrice')=>[\n        ...products\n    ].sort((a, b)=>order === 'lowToHighPrice' ? a.discountedPrice() - b.discountedPrice() : b.discountedPrice() - a.discountedPrice());\n// funktion som sorterar produkterna beroende på omdöme, lågt till högt eller högt till lågt.\nconst $3e2d7e5f210f46c9$export$9676315b8d6e55bf = (products, order = 'lowToHighRating')=>[\n        ...products\n    ].sort((a, b)=>order === 'lowToHighRating' ? a.rating - b.rating : b.rating - a.rating);\n\n\n// funktion som hämtar produkterna och kör olika filter på produkterna.\n(0, $d260f059385ba7e9$export$68a801b7b3c0bfaa)().then((products)=>{\n    $ad2bcec7a0192558$var$filterDropdown(products);\n    $ad2bcec7a0192558$var$displayProducts(products);\n});\n// funktion som som väntar på getProducts() för att hämta listan products, och sedan visa listan i DOM'en.\nasync function $ad2bcec7a0192558$var$fetchAndLogProducts() {\n    try {\n        const products = await (0, $d260f059385ba7e9$export$68a801b7b3c0bfaa)();\n        $ad2bcec7a0192558$var$displayProducts(products);\n    } catch (error) {\n        console.error('Error fetching products:', error);\n    }\n}\n// funktion som hanterar alla dropdown menyer. \nfunction $ad2bcec7a0192558$var$filterDropdown(products) {\n    const filterCategoryDropdown = document.getElementById('categoryFilter');\n    const filterPriceDropdown = document.getElementById('priceFilter');\n    const sortPriceDropdown = document.getElementById('priceHighLowSort');\n    const sortRatingDropdown = document.getElementById('ratingHighLowSort');\n    filterCategoryDropdown.addEventListener('change', ()=>{\n        const selectedCategory = filterCategoryDropdown.value;\n        const selectedFilterPrice = filterPriceDropdown.value;\n        let filteredProducts = (0, $3e2d7e5f210f46c9$export$6d1731a321e8bdf4)(products, selectedCategory);\n        filteredProducts = (0, $3e2d7e5f210f46c9$export$37d568e1c36a0ac2)(filteredProducts, selectedFilterPrice);\n        $ad2bcec7a0192558$var$displayProducts(filteredProducts);\n    });\n    // Lyssnar på förändringar i pris-filter\n    filterPriceDropdown.addEventListener('change', ()=>{\n        const selectedCategory = filterCategoryDropdown.value;\n        const selectedFilterPrice = filterPriceDropdown.value;\n        const selectedSortPrice = sortPriceDropdown.value;\n        const selectedSortRating = sortRatingDropdown.value;\n        let filteredProducts = (0, $3e2d7e5f210f46c9$export$6d1731a321e8bdf4)(products, selectedCategory);\n        filteredProducts = (0, $3e2d7e5f210f46c9$export$37d568e1c36a0ac2)(filteredProducts, selectedFilterPrice);\n        if (selectedSortPrice) filteredProducts = (0, $3e2d7e5f210f46c9$export$799bcc2b7243bbab)(filteredProducts, selectedSortPrice);\n        else if (selectedSortRating) filteredProducts = (0, $3e2d7e5f210f46c9$export$9676315b8d6e55bf)(filteredProducts, selectedSortRating);\n        $ad2bcec7a0192558$var$displayProducts(filteredProducts);\n    });\n    // Lyssnar på förändringar i sortering efter pris\n    sortPriceDropdown.addEventListener('change', ()=>{\n        const selectedSortPrice = sortPriceDropdown.value;\n        const selectedCategory = filterCategoryDropdown.value;\n        const selectedFilterPrice = filterPriceDropdown.value;\n        let filteredProducts = (0, $3e2d7e5f210f46c9$export$6d1731a321e8bdf4)(products, selectedCategory);\n        filteredProducts = (0, $3e2d7e5f210f46c9$export$37d568e1c36a0ac2)(filteredProducts, selectedFilterPrice);\n        filteredProducts = (0, $3e2d7e5f210f46c9$export$799bcc2b7243bbab)(filteredProducts, selectedSortPrice);\n        $ad2bcec7a0192558$var$displayProducts(filteredProducts);\n    });\n    sortRatingDropdown.addEventListener('change', ()=>{\n        const selectedSortRating = sortRatingDropdown.value;\n        const selectedCategory = filterCategoryDropdown.value;\n        const selectedFilterPrice = filterPriceDropdown.value;\n        let filteredProducts = (0, $3e2d7e5f210f46c9$export$6d1731a321e8bdf4)(products, selectedCategory);\n        filteredProducts = (0, $3e2d7e5f210f46c9$export$37d568e1c36a0ac2)(filteredProducts, selectedFilterPrice);\n        filteredProducts = (0, $3e2d7e5f210f46c9$export$9676315b8d6e55bf)(filteredProducts, selectedSortRating);\n        $ad2bcec7a0192558$var$displayProducts(filteredProducts);\n    });\n}\n// funktion som visar upp alla produkter i vars ett productCard.\nfunction $ad2bcec7a0192558$var$displayProducts(products) {\n    const container = document.getElementById('productContainer');\n    container.innerHTML = '';\n    products.forEach((product)=>{\n        product.displayInfo();\n        const productCard = product.productCard();\n        container.appendChild(productCard);\n    });\n}\n$ad2bcec7a0192558$var$fetchAndLogProducts();\n\n\n//# sourceMappingURL=index.d9033319.js.map\n","import { getProducts } from \"./modules/API.ts\";\r\nimport { Product } from \"./modules/Product.ts\";\r\nimport { filterByCategory, filterByPrice, sortByPrice, sortByRating } from \"./modules/Filter.ts\";\r\n\r\n// funktion som hämtar produkterna och kör olika filter på produkterna.\r\ngetProducts().then((products:Product[]) => {\r\n    filterDropdown(products);\r\n    displayProducts(products);\r\n});\r\n\r\n// funktion som som väntar på getProducts() för att hämta listan products, och sedan visa listan i DOM'en.\r\nasync function fetchAndLogProducts() {\r\n    try {\r\n        const products = await getProducts();\r\n        displayProducts(products);\r\n    } catch (error) {\r\n        console.error('Error fetching products:', error)\r\n    }\r\n}\r\n\r\n// funktion som hanterar alla dropdown menyer. \r\nfunction filterDropdown(products: Product[]) {\r\n    type SortOrderPrice = \"lowToHighPrice\" | \"highToLowPrice\";\r\n    type SortOrderRating = \"lowToHighRating\" | \"highToLowRating\";\r\n    \r\n    \r\n    const filterCategoryDropdown = document.getElementById('categoryFilter') as HTMLSelectElement;\r\n    const filterPriceDropdown = document.getElementById('priceFilter') as HTMLSelectElement;\r\n    const sortPriceDropdown = document.getElementById('priceHighLowSort') as HTMLSelectElement;\r\n    const sortRatingDropdown = document.getElementById('ratingHighLowSort') as HTMLSelectElement;\r\n\r\n\r\n    filterCategoryDropdown.addEventListener('change', () => {\r\n        const selectedCategory = filterCategoryDropdown.value;\r\n        const selectedFilterPrice = filterPriceDropdown.value;\r\n\r\n        let filteredProducts = filterByCategory(products, selectedCategory);\r\n\r\n        filteredProducts = filterByPrice(filteredProducts, selectedFilterPrice);\r\n\r\n        displayProducts(filteredProducts);\r\n    });\r\n\r\n    // Lyssnar på förändringar i pris-filter\r\n    filterPriceDropdown.addEventListener('change', () => {\r\n        const selectedCategory = filterCategoryDropdown.value;\r\n        const selectedFilterPrice = filterPriceDropdown.value;\r\n        const selectedSortPrice = sortPriceDropdown.value as SortOrderPrice;\r\n        const selectedSortRating = sortRatingDropdown.value as SortOrderRating;\r\n\r\n        let filteredProducts = filterByCategory(products, selectedCategory);\r\n        filteredProducts = filterByPrice(filteredProducts, selectedFilterPrice);\r\n\r\n        if (selectedSortPrice) {\r\n            filteredProducts = sortByPrice(filteredProducts, selectedSortPrice);\r\n        } else if (selectedSortRating) {\r\n            filteredProducts = sortByRating(filteredProducts, selectedSortRating);\r\n        }\r\n\r\n        displayProducts(filteredProducts);\r\n    });\r\n\r\n    // Lyssnar på förändringar i sortering efter pris\r\n    sortPriceDropdown.addEventListener('change', () => {\r\n        const selectedSortPrice = sortPriceDropdown.value as SortOrderPrice;\r\n        const selectedCategory = filterCategoryDropdown.value;\r\n        const selectedFilterPrice = filterPriceDropdown.value;\r\n\r\n        let filteredProducts = filterByCategory(products, selectedCategory);\r\n        filteredProducts = filterByPrice(filteredProducts, selectedFilterPrice);\r\n\r\n        filteredProducts = sortByPrice(filteredProducts, selectedSortPrice);\r\n\r\n        displayProducts(filteredProducts);\r\n    });\r\n\r\n    sortRatingDropdown.addEventListener('change', () => {\r\n        const selectedSortRating = sortRatingDropdown.value as SortOrderRating;\r\n        const selectedCategory = filterCategoryDropdown.value;\r\n        const selectedFilterPrice = filterPriceDropdown.value;\r\n\r\n        let filteredProducts = filterByCategory(products, selectedCategory);\r\n        filteredProducts = filterByPrice(filteredProducts, selectedFilterPrice);\r\n\r\n        filteredProducts = sortByRating(filteredProducts, selectedSortRating);\r\n\r\n        displayProducts(filteredProducts);\r\n    });\r\n}\r\n\r\n// funktion som visar upp alla produkter i vars ett productCard.\r\nfunction displayProducts(products: Product[]) {\r\n    const container = document.getElementById('productContainer') as HTMLDivElement;\r\n    container.innerHTML = '';\r\n\r\n    products.forEach((product: Product) => {\r\n        product.displayInfo();\r\n\r\n        const productCard = product.productCard();\r\n        container.appendChild(productCard);\r\n    });\r\n}\r\n\r\nfetchAndLogProducts();","import { Product, ProductInterface } from \"./Product.ts\";\r\n\r\n// funktion som hanterar API/URL'n. Skapar en array med alla produkterna och returnerar dessa.\r\nexport async function getProducts(): Promise<Product[]> {\r\n    try {\r\n        const response = await fetch('https://dummyjson.com/products');\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch products');\r\n        }\r\n        const data = await response.json();\r\n\r\n        const products: Product[] = data.products.map((product:ProductInterface) => {\r\n            return new Product(\r\n                product.title,\r\n                product.images,\r\n                product.stock,\r\n                product.price,\r\n                product.discountPercentage,\r\n                product.category,\r\n                product.rating\r\n            );\r\n        });\r\n\r\n        return products;\r\n    } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n        throw new Error('Could not fetch products. Please try again later.')\r\n    }\r\n}","// klass för product med alla variablar som behövs.\r\nexport interface ProductInterface {\r\n    title: string;\r\n    images: string[];\r\n    stock: number;\r\n    price: number;\r\n    discountPercentage: number;\r\n    category: string;\r\n    rating: number;\r\n    discountedPrice(): number;\r\n}\r\n\r\nexport class Product implements ProductInterface {\r\n    \r\n    constructor(\r\n        public title: string,\r\n        public images: string[],\r\n        public stock: number,\r\n        public price: number,\r\n        public discountPercentage: number,\r\n        public category: string,\r\n        public rating: number\r\n    ){\r\n        \r\n    }\r\n\r\n    // funktion som loggar alla variablar.\r\n    displayInfo():void {\r\n        console.table({\r\n            Name: this.title,\r\n            Images: this.images.join(\", \"),\r\n            Stock: this.stock,\r\n            Price: `$${this.price}`,\r\n            Discount: `${this.discountPercentage}%`,\r\n            Category: this.category,\r\n            Rating: this.rating,\r\n        });\r\n    }\r\n\r\n    // funktion som räknar ut det rabatterade priset.\r\n    discountedPrice():number {\r\n        return Math.round(this.price * (1 - this.discountPercentage / 100) * 100) / 100;\r\n    }\r\n\r\n    // funktion som uppdaterar lagersaldot.\r\n    updateStock():void {\r\n        if (this.stock > 0) this.stock--;\r\n    }\r\n\r\n    // funktion som skapar ett produktkort och sedan returnerar det.\r\n    productCard():HTMLDivElement {\r\n        const productCard = document.createElement('div');\r\n        productCard.classList.add('card');\r\n\r\n        const title = document.createElement('h3');\r\n        title.innerText = this.title;\r\n\r\n        const img = document.createElement('img');\r\n        img.src = this.images[0];\r\n        img.alt = `Image of ${this.title}`;\r\n        \r\n        const stock = document.createElement('p');\r\n        stock.innerHTML = `<b>Stock: ${this.stock}</b>`;\r\n        \r\n        const discountedPrice = document.createElement('p');\r\n        discountedPrice.innerHTML = `<i>Price: $${this.discountedPrice()}</i>`;\r\n        \r\n        const addToCartBtn = document.createElement('button');\r\n        addToCartBtn.innerText = \"Add to Cart\";\r\n        addToCartBtn.addEventListener('click', () => {\r\n            this.updateStock();\r\n            stock.innerHTML = `<b>Stock: ${this.stock}</b>`;\r\n        });\r\n        productCard.append(title, img, stock, discountedPrice, addToCartBtn);\r\n    \r\n        return productCard;\r\n    }\r\n}","import { Product } from \"./Product.ts\";\r\n// funktion som är ett filter på produkternas kategorier.\r\nconst filterByCategory = (products:Product[], category:string): Product[] => \r\n    category === \"All\" || category === \"Select category\" ? products : products.filter(product => product.category === category);\r\n\r\n// funktion på produkternas priser.\r\nconst filterByPrice = (products:Product[], priceRange:string):Product[] => {\r\n    if (priceRange === \"Select price\") {\r\n        return products;  \r\n    }\r\n\r\n    return products.filter(product => {\r\n        const displayedPrice = product.discountedPrice();\r\n\r\n        return priceRange === \"< $50\" ? displayedPrice < 50 : displayedPrice > 50;\r\n    });\r\n};\r\n\r\n// funktion som sorterar produkterna beroende på pris, lågt till högt eller högt till lågt.\r\nconst sortByPrice = (products: Product[], order: 'lowToHighPrice' | 'highToLowPrice' = 'lowToHighPrice'): Product[] => \r\n    [...products].sort((a, b) => order === 'lowToHighPrice' ? a.discountedPrice() - b.discountedPrice() : b.discountedPrice() - a.discountedPrice());\r\n\r\n// funktion som sorterar produkterna beroende på omdöme, lågt till högt eller högt till lågt.\r\nconst sortByRating = (products: Product[], order: 'lowToHighRating' | 'highToLowRating' = 'lowToHighRating'): Product[] => \r\n    [...products].sort((a, b) => order === 'lowToHighRating' ? a.rating - b.rating : b.rating - a.rating);\r\n\r\nexport {filterByCategory, filterByPrice, sortByPrice, sortByRating}"],"names":["$7278615a9fe729f6$export$264ad599d7cef668","constructor","title","images","stock","price","discountPercentage","category","rating","displayInfo","console","table","Name","Images","join","Stock","Price","Discount","Category","Rating","discountedPrice","Math","round","updateStock","productCard","document","createElement","classList","add","innerText","img","src","alt","innerHTML","addToCartBtn","addEventListener","append","$d260f059385ba7e9$export$68a801b7b3c0bfaa","response","fetch","ok","Error","data","json","products","map","product","error","$3e2d7e5f210f46c9$export$6d1731a321e8bdf4","filter","$3e2d7e5f210f46c9$export$37d568e1c36a0ac2","priceRange","displayedPrice","$3e2d7e5f210f46c9$export$799bcc2b7243bbab","order","sort","a","b","$3e2d7e5f210f46c9$export$9676315b8d6e55bf","$ad2bcec7a0192558$var$fetchAndLogProducts","$ad2bcec7a0192558$var$displayProducts","container","getElementById","forEach","appendChild","then","$ad2bcec7a0192558$var$filterDropdown","filterCategoryDropdown","filterPriceDropdown","sortPriceDropdown","sortRatingDropdown","selectedCategory","value","selectedFilterPrice","filteredProducts","selectedSortPrice","selectedSortRating"],"version":3,"file":"index.d9033319.js.map"}